<!DOCTYPE html>
<html data-theme="<%= theme %>">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Steel Debug View</title>
  <style>
    /* CSS Variables for themes */
    html[data-theme="dark"] {
      --bg-primary: #1c1c1c;
      --bg-secondary: #2a2a2a;
      --border-color: #383838;
      --text-color: #ffffff;
    }

    html[data-theme="light"] {
      --bg-primary: #ffffff;
      --bg-secondary: #f5f5f5;
      --border-color: #e0e0e0;
      --text-color: #000000;
    }

    html,
    body {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      achtergrond: var(--bg-primary);
      overflow: hidden;
    }

    .container {
      width: 100%;
      height: 100%;
      background: var(--bg-primary);
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      overflow: hidden;
    }

    .top-bar {
      height: 40px;
      flex: 0 0 40px;
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      padding: 6px;
      box-sizing: border-box;
    }

    .url-bar {
      width: 80%;
      max-width: 800px;
      height: 28px;
      padding: 0 12px;
      background: var(--bg-primary);
      border-radius: 4px;
      border: 1px solid var(--border-color);
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--text-color);
      font-family: system-ui, -apple-system, sans-serif;
    }

    .favicon {
      width: 14px;
      height: 14px;
      object-fit: contain;
      margin-right: 4px;
    }

    .url-input {
      flex: 1;
      border: none;
      background: transparent;
      color: var(--text-color);
      font-family: 'Geist', sans-serif;
      font-size: 13px;
      outline: none;
      width: 100%;
    }

    .content {
      min-height: 0;
      flex: 1;
      overflow: hidden;
      background: white;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    #canvas {
      position: absolute;
      height: 100%;
      width: auto;
      left: 50%;
      transform: translateX(-50%);
      object-fit: contain;
    }

    .nav-buttons {
      display: flex;
      gap: 4px;
      margin-right: 16px;
    }

    .nav-button {
      width: 24px;
      height: 24px;
      border: none;
      background: transparent;
      color: var(--text-color);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      padding: 0;
      opacity: 0.6;
      transition: opacity 0.2s;
    }

    .nav-button:hover {
      opacity: 1;
    }

    /* Tab styles */
    .tabs-container {
      flex: 0 0 40px;
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border-color);
      display: flex;
      overflow-x: auto;
      padding: 4px;
      gap: 4px;
    }

    .tab {
      display: flex;
      align-items: center;
      padding: 4px 12px;
      background: var(--bg-primary);
      border: 1px solid var(--border-color);
      border-radius: 4px;
      cursor: pointer;
      white-space: nowrap;
      color: var(--text-color);
      font-size: 13px;
      gap: 6px;
      max-width: 300px;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: background 0.2s;
    }

    .tab.active {
      background: var(--bg-secondary);
      border-bottom: none;
    }

    .tab:hover {
      background: var(--bg-secondary);
    }
  </style>
</head>

<body>
  <div class="container">
    <!-- Tabs container -->
    <div class="tabs-container" id="tabs-container"></div>

    <% if (showControls) { %>
      <div class="top-bar">
        <div class="nav-buttons">
          <button class="nav-button" id="back-button">‹</button>
          <button class="nav-button" id="forward-button">›</button>
        </div>
        <div class="url-bar">
          <img id="favicon" src="/placeholder-favicon.png" class="favicon" alt="Favicon">
          <input type="text" id="url-text" class="url-input" value="Session not connected" <%=interactive ? ""
            : "readonly" %>>
        </div>
      </div>
      <% } %>
        <div class="content">
          <canvas id="canvas"></canvas>
        </div>
  </div>
  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d', { alpha: false });
    const urlText = document.getElementById('url-text');
    const favicon = document.getElementById('favicon');
    const tabsContainer = document.getElementById('tabs-container');
    let pages = {};
    let currentPageId = null;

    function updateCanvasSize() {
      const container = canvas.parentElement;
      const parentHeight = container.clientHeight;
      const currentPage = pages[currentPageId];
      if (!currentPage || !currentPage.dimensions) return;
      const { width: imgWidth, height: imgHeight } = currentPage.dimensions;
      const targetHeight = parentHeight;
      const targetWidth = targetHeight * (imgWidth / imgHeight);
      const dpr = window.devicePixelRatio || 1;
      canvas.width = targetWidth * dpr;
      canvas.height = targetHeight * dpr;
      ctx.scale(dpr, dpr);
      canvas.style.height = '100%';
      canvas.style.width = 'auto';
    }

    window.addEventListener('resize', updateCanvasSize);

    const ws = new WebSocket('<%= wsUrl %>');

    function getScaledCoordinates(e) {
        // Obtenir les dimensions et la position du canvas
        const rect = canvas.getBoundingClientRect();
        const canvasWidth = rect.width;
        const canvasHeight = rect.height;

        // Vérifier les dimensions de l'image actuelle
        const currentPage = pages[currentPageId];
        if (!currentPage || !currentPage.dimensions) {
          console.warn("Page ou dimensions non définies");
          return { x: 0, y: 0 };
        }
        const { width: imgWidth, height: imgHeight } = currentPage.dimensions;

        // Calculer les facteurs d'échelle
        const scaleX = imgWidth / canvasWidth;
        const scaleY = imgHeight / canvasHeight;

        // Calculer les coordonnées ajustées
        const x = Math.round((e.clientX - rect.left) * scaleX);
        const y = Math.round((e.clientY - rect.top) * scaleY);

        // Limiter les coordonnées aux dimensions de l'image
        return {
          x: Math.max(0, Math.min(x, imgWidth)),
          y: Math.max(0, Math.min(y, imgHeight))
        };
      }

    function addTab(pageId, url, faviconSrc) {
      const tab = document.createElement('div');
      tab.className = 'tab';
      tab.dataset.pageId = pageId;
      tab.innerHTML = `<img src="${faviconSrc || '/placeholder-favicon.png'}" class="favicon" alt="Favicon"> ${url}`;
      tab.addEventListener('click', () => selectTab(pageId));
      tabsContainer.appendChild(tab);
      if (!currentPageId) {
        selectTab(pageId);
      }
    }

    function selectTab(pageId) {
      if (!pages[pageId]) return;
      currentPageId = pageId;
      document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.toggle('active', tab.dataset.pageId === pageId);
      });
      if (urlText && pages[pageId].url) {
        urlText.value = pages[pageId].url;
      }
      if (favicon && pages[pageId].favicon) {
        favicon.src = pages[pageId].favicon;
      }
      if (pages[pageId].data) {
        const img = new Image();
        img.onload = () => {
          pages[pageId].dimensions = { width: img.naturalWidth, height: img.naturalHeight };
          updateCanvasSize();
          ctx.drawImage(img, 0, 0, canvas.width / window.devicePixelRatio, canvas.height / window.devicePixelRatio);
        };
        img.src = 'data:image/jpeg;base64,' + pages[pageId].data;
      }
    }

    <% if (interactive) { %>
      canvas.addEventListener('mousedown', (e) => {
        if (!currentPageId) return;
        const coords = getScaledCoordinates(e);
        ws.send(JSON.stringify({
          type: 'mouseEvent',
          pageId: currentPageId,
          event: {
            type: 'mousePressed',
            x: coords.x,
            y: coords.y,
            button: e.button === 0 ? 'left' : e.button === 1 ? 'middle' : 'right',
            modifiers: (e.ctrlKey ? 2 : 0) | (e.shiftKey ? 8 : 0) | (e.altKey ? 1 : 0) | (e.metaKey ? 4 : 0),
            clickCount: e.detail
          }
        }));
      });

      canvas.addEventListener('mouseup', (e) => {
        if (!currentPageId) return;
        const coords = getScaledCoordinates(e);
        ws.send(JSON.stringify({
          type: 'mouseEvent',
          pageId: currentPageId,
          event: {
            type: 'mouseReleased',
            x: coords.x,
            y: coords.y,
            button: e.button === 0 ? 'left' : e.button === 1 ? 'middle' : 'right',
            modifiers: (e.ctrlKey ? 2 : 0) | (e.shiftKey ? 8 : 0) | (e.altKey ? 1 : 0) | (e.metaKey ? 4 : 0),
            clickCount: e.detail
          }
        }));
      });

      canvas.addEventListener('wheel', (e) => {
        if (!currentPageId) return;
        const coords = getScaledCoordinates(e);
        ws.send(JSON.stringify({
          type: 'mouseEvent',
          pageId: currentPageId,
          event: {
            type: 'mouseWheel',
            x: coords.x,
            y: coords.y,
            button: 'none',
            modifiers: (e.ctrlKey ? 2 : 0) | (e.shiftKey ? 8 : 0) | (e.altKey ? 1 : 0) | (e.metaKey ? 4 : 0),
            deltaX: e.deltaX,
            deltaY: e.deltaY,
            clickCount: e.detail
          }
        }));
      });

      document.addEventListener('keydown', (e) => {
        if (!currentPageId || (urlText && document.activeElement === urlText)) return;
        ws.send(JSON.stringify({
          type: 'keyEvent',
          pageId: currentPageId,
          event: {
            type: 'keyDown',
            text: e.key.length === 1 ? e.key : undefined,
            code: e.code,
            key: e.key,
            keyCode: e.keyCode
          }
        }));
      });

      document.addEventListener('keyup', (e) => {
        if (!currentPageId || (urlText && document.activeElement === urlText)) return;
        ws.send(JSON.stringify({
          type: 'keyEvent',
          pageId: currentPageId,
          event: {
            type: 'keyUp',
            text: e.key.length === 1 ? e.key : undefined,
            code: e.code,
            key: e.key,
            keyCode: e.keyCode
          }
        }));
      });

      if (urlText) {
        urlText.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' && currentPageId) {
            e.preventDefault();
            const url = urlText.value;
            ws.send(JSON.stringify({
              type: 'navigation',
              pageId: currentPageId,
              event: { url }
            }));
            window.parent.postMessage({ type: 'navigation', url }, '*');
            urlText.blur();
          }
        });
      }

      <% if (showControls) { %>
        const backButton = document.getElementById('back-button');
        const forwardButton = document.getElementById('forward-button');
        backButton.addEventListener('click', () => {
          if (currentPageId) {
            ws.send(JSON.stringify({
              type: 'navigation',
              pageId: currentPageId,
              event: { action: 'back' }
            }));
          }
        });
        forwardButton.addEventListener('click', () => {
          if (currentPageId) {
            ws.send(JSON.stringify({
              type: 'navigation',
              pageId: currentPageId,
              event: { action: 'forward' }
            }));
          }
        });
      <% } %>
    <% } %>

      ws.onmessage = (event) => {
        const payload = JSON.parse(event.data);
        if (payload.type === 'pageClosed') {
          const pageId = payload.pageId;
          if (pages[pageId]) {
            delete pages[pageId];
            const tab = tabsContainer.querySelector(`.tab[data-page-id="${pageId}"]`);
            if (tab) tab.remove();
            if (currentPageId === pageId) {
              const remainingPages = Object.keys(pages);
              if (remainingPages.length > 0) {
                selectTab(remainingPages[0]);
              } else {
                currentPageId = null;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                if (urlText) urlText.value = 'No tabs open';
                if (favicon) favicon.src = '/placeholder-favicon.png';
              }
            }
          }
          return;
        }

        const { pageId, url, favicon, data } = payload;
        if (!pages[pageId]) {
          pages[pageId] = { url, favicon, data, dimensions: { width: <%= dimensions? dimensions.width : 1920 %>, height: <%= dimensions? dimensions.height : 1080 %> } };
          addTab(pageId, url, favicon);
        } else {
          pages[pageId] = { url, favicon, data, dimensions: pages[pageId].dimensions };
          const tab = tabsContainer.querySelector(`.tab[data-page-id="${pageId}"]`);
          if (tab) {
            tab.innerHTML = `<img src="${favicon || '/placeholder-favicon.png'}" class="favicon" alt="Favicon"> ${url}`;
          }
        }

        if (pageId === currentPageId) {
          if (url && urlText && document.activeElement !== urlText) {
            urlText.value = url;
          }
          if (favicon && favicon) {
            favicon.src = favicon;
          }
          window.parent.postMessage({ type: 'navigation', url, favicon }, '*');
          if (data) {
            const img = new Image();
            img.onload = () => {
              pages[pageId].dimensions = { width: img.naturalWidth, height: img.naturalHeight };
              updateCanvasSize();
              ctx.drawImage(img, 0, 0, canvas.width / window.devicePixelRatio, canvas.height / window.devicePixelRatio);
            };
            img.src = 'data:image/jpeg;base64,' + data;
          }
        }
      };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    ws.onclose = () => {
      console.log('WebSocket connection closed');
    };
  </script>
</body>

</html>